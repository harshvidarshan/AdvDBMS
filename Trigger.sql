--simple trigger syntax FOR B2,B3
-- STEP 1 CREATE TRIGGER ON DATABASE
ALTER TRIGGER TRIGGER_DDL
ON DATABASE
FOR
CREATE_TABLE, DROP_TABLE, ALTER_TABLE 
as
BEGIN 
PRINT 'TRIGGER TABLE CREATED/ALTER/DROP SUCCESSFULLY' 
END

--STEP 2 NOW PERFORM CREATE, ALTER AND DROP TABLE
CREATE TABLE S1
(NAME VARCHAR(50),
ID INT);

ALTER TABLE S1 ADD PASS NVARCHAR(20)

DROP TABLE S1

--DDL TRIGGER FOR A AND B1 CLASS
--STEP 1 TO MAINTAIN TRIGGER_LOG AND STORE TRIGGER EVENT DATA
CREATE TABLE DDL_LOGTABLE 
(
LOGID INT IDENTITY(1,1) PRIMARY KEY, 
EVENT_VALUE XML NOT NULL,
EVENT_DATE DATETIME NOT NULL,
EVENT_BY SYSNAME NOT NULL )

SELECT* FROM DDL_LOGTABLE

--STEP 2 EVERYTIME WHEN DDL COMMANDS LIKE CREATE, DROP OR ALTER TABLE, THESE TRIGGER WILL BE EXECUTED
CREATE TRIGGER TRIGGER_DDL_DEMO
ON DATABASE
FOR
CREATE_TABLE, DROP_TABLE, ALTER_TABLE 
as
BEGIN 
INSERT INTO DDL_LOGTABLE (EVENT_DATE, EVENT_BY, EVENT_VALUE)
VALUES
(GETDATE(), USER, EVENTDATA())
END

--STEP 3 NOW TO CREATE ANOTHER TABLE TO CHECK WHAT TYPE OF TRIGGER OCCURS
CREATE TABLE T1
(NAME VARCHAR(50),
ID INT);
--1 ROW AFFECTED MESSAGE WILL OCCUR AND

--STEP 4 NOW CHECK ON DDL_LOGTABLE
SELECT * FROM  DDL_LOGTABLE 

--STEP 6 PERFORMING OTHER ALTER AND DROP COMMAND
ALTER TABLE T1 ADD ENROLLNO BIGINT

SELECT * FROM  DDL_LOGTABLE

--ON CLICKING <EVENT_INSTANCE> THE XML FILE WILL BE VISIBLE

DROP TABLE T1

SELECT * FROM  DDL_LOGTABLE